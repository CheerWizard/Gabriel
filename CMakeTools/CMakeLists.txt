# copying target dir to destination dir. If destination does not exist, create it.
macro(copy_dir dir1 dir2)
    set(srcDir ${CMAKE_SOURCE_DIR}/${dir1})
    set(destDir ${CMAKE_BINARY_DIR}/${dir2})

    message(STATUS "Creating directory ${destDir}")
    make_directory(${destDir})

    message(STATUS "Search files in directory ${srcDir}")
    file(GLOB_RECURSE templateFiles RELATIVE ${srcDir} ${srcDir}/*)

    message(STATUS "Copying files from directory ${srcDir}")
    foreach(templateFile ${templateFiles})
        set(srcTemplatePath ${srcDir}/${templateFile})
        if(NOT IS_DIRECTORY ${srcTemplatePath})
            message(STATUS "Target file path ${srcTemplatePath}")
            message(STATUS "Destination file path ${destDir}/${templateFile}")
            configure_file(
                    ${srcTemplatePath}
                    ${destDir}/${templateFile}
                    COPYONLY)
        endif(NOT IS_DIRECTORY ${srcTemplatePath})
    endforeach(templateFile)

endmacro(copy_dir)

# delete build directory
macro(delete_build_dir dir)
    set(buildDir ${CMAKE_BINARY_DIR}/${dir})
    message(STATUS "Deleting build directory ${buildDir}")
    file(REMOVE_RECURSE ${buildDir})
endmacro(delete_build_dir)

# delete destination dir and copy target dir into destination dir.
macro(replace_dirs targetDir destDir)
    delete_build_dir(${destDir})
    copy_dir(${targetDir} ${destDir})
endmacro(replace_dirs)

# replace file
macro(replace_file srcFile destFile)
    if (EXISTS ${srcFile})
        file(REMOVE_RECURSE ${destFile})
        configure_file(${srcFile} ${destFile} COPYONLY)
    endif()
endmacro()

macro(move_to_build file)
    replace_file(${PROJECT_SOURCE_DIR}/${file} ${PROJECT_BINARY_DIR}/${file})
endmacro()

# dynamic linking of lib directory
macro(dynamic_link project src_dir)
    message(STATUS "Dynamically linking files from directory ${src_dir}")
    file(GLOB libs ${src_dir}/*.lib)
    file(GLOB dlls ${src_dir}/*.dll)

    foreach(src_filepath ${libs})
        get_filename_component(src_filename ${src_filepath} NAME)
        set(src ${src_dir}/${src_filename})
        set(dest ${PROJECT_BINARY_DIR}/${src_filename})
        message(STATUS "Target file path ${src}")
        message(STATUS "Destination file path ${dest}")
        configure_file(
                ${src}
                ${dest}
                COPYONLY
        )
        string(REPLACE ".lib" "" src_libname ${src_filename})
        target_link_libraries(${project} PUBLIC ${src_libname})
    endforeach(src_filepath)

    foreach(src_filepath ${dlls})
        get_filename_component(src_filename ${src_filepath} NAME)
        set(src ${src_dir}/${src_filename})
        set(dest ${PROJECT_BINARY_DIR}/${src_filename})
        message(STATUS "Target file path ${src}")
        message(STATUS "Destination file path ${dest}")
        configure_file(
                ${src}
                ${dest}
                COPYONLY
        )
        string(REPLACE ".dll" "" src_libname ${src_filename})
        target_link_libraries(${project} PUBLIC ${src_libname})
    endforeach(src_filepath)

endmacro()